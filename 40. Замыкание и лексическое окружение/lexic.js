'use strict';

/* let number = 5;

function logNumber() {
  let number = 4; debugger;
  console.log(number); // запомнили ссылку на number, а не на её значение
}

number = 6;

logNumber(); debugger; */

// У каждой выполняемой функции, блока кода и скрипта есть связанный внутренний объект - лексическое окружение
// Внутреннее лексическое окружение - объект, в котором как свойства хранятся все локальные переменные этой функции, а также значение this.
// У внутреннего объекта есть ссылка на внешний, чтобы функция могла найти данные, которых нет во внутреннем окружении (замыкание ?)
// Внешнее - которое соответствует коду снаружи. Функция всегда получает актуальное внешнее лексическое окружение
// Когда функция завершается, лексическое окружение уничтожается. Каждый вызов функции - создание нового лексического окружения

function createCounter() {

  let counter = 0;

  const myFunction = function () {

    counter++;
    // создаем замыкание, которое является частью этой функции (хранит ссылку на counter)
    // то есть сохраняем ссылки на вещи, которые ей доступны


    // environment ссылается на лексическое окружение места, где эта функция была создана
    // то есть когда myFunction была создана она получила ссылку на лексическое окружение функции createCounter() и оттуда берет нужное
    // с помощью environment функция знает что положить в замыкание
    return counter;
  };
   
  return myFunction;
  // возвращаем, что делает функция и замыкание, на что ссылается myFunction. Внутреннее окружение уничтожается
}

const increment = createCounter();

const c1 = increment(); // сразу идет в myFunction, оно все ещё хранит counter
const c2 = increment();
const c3 = increment();

console.log(c1, c2, c3);